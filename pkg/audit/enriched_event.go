// Copyright Â© 2018 Heptio
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package audit

import (
	"net/http"
	"strconv"

	"github.com/heptiolabs/ironclad/pkg/audit/types"

	geoip "github.com/oschwald/geoip2-golang"
)

// RequestHeaders returns the request headers from this event as an http.Header map
func (e *EnrichedEvent) RequestHeaders() http.Header {
	requestHeaders := make(http.Header)
	for k, v := range e.Transaction.Request.Headers {
		requestHeaders.Set(k, v)
	}
	return requestHeaders
}

// GetMessage returns the message generated by the specified rule ID, or nil if no message was generated for this event.
func (e *EnrichedEvent) GetMessage(ruleID int) *types.Message {
	ruleIDstr := strconv.Itoa(ruleID)
	for _, msg := range e.Transaction.Messages {
		if msg.Details.RuleID == ruleIDstr {
			return &msg
		}
	}
	return nil
}

// EnrichedEvent is an event that has been annotated additional context
type EnrichedEvent struct {
	types.Event
	GeoIPLookup *geoip.City
	ASNLookup   *geoip.ASN
}
